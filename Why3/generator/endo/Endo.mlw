(********************************************************************)
(* Copyright (C) 2019-2020 Alain Giorgetti and Clotilde Erard       *)
(* FEMTO-ST institute                                               *)
(********************************************************************)

(********************************************************************)
(*  This software is distributed under the terms of the GNU Lesser  *)
(*  General Public License version 2.1                              *)
(********************************************************************)

module Endo

  use int.Int
  use array.Array

  predicate is_endo_sub (a:array int) (l u:int) = forall i:int.
    l <= i < u -> 0 <= a[i] < a.length

  predicate is_endo (a:array int) = is_endo_sub a 0 a.length

  let function b_endo (a: array int) : bool
    ensures { result <-> is_endo a }
  =
    let n = a.length in
    for i = 0 to n-1 do
      invariant { is_endo_sub a 0 i }
      if not (0 <= a[i] < n) then return false
    done;
    true

  lemma b_is_endo_sound: forall a: array int. is_endo a -> b_endo a = true

  (* Wrong mutation of b_endo: *)
  let function b_endo_wrong (a: array int) : bool
    ensures { result <-> is_endo a }
  =
    let n = a.length in
    for i = 0 to n-1 do
      invariant { is_endo_sub a 0 i }
      if not (0 <= a[i] < n-1) then return false;
    done;
    true

   (* Wrong lemma, however proved as a consequence of the wrong postcondition
      of b_endo_wrong. *)
  lemma b_endo_wrong_sound:
    forall a: array int. is_endo a -> b_endo_wrong a = true

end


module Enum

  use int.Int
  use ref.Ref
  use array.Array
  use array.ArrayEq
  use arrayExtension.Cte
  use Endo
  use lexgen.Cursor

  clone lexgen.LexXX with
    predicate is_XX = is_endo

  let create_cursor (n: int) : cursor
    ensures  { result.new = True <-> n >= 0 }
    ensures  { result.new = True <-> exists a : array int. length a = n /\ is_endo a }
    ensures  { result.new -> sound result }
    ensures  { result.new -> min_lex result.current }
    ensures  { result.new -> length result.current = n }
  =
    if n < 0 then
      { current = make 0 0; new = False }
    else
      let a = make n 0 in
      { current = a; new = True }

  let next (c: cursor) : unit
    requires { sound c }
    ensures  { sound c }
    ensures  { c.current.length = (old c).current.length }
    ensures  { c.new -> lt_lex (old c.current) c.current }
    ensures  { c.new -> inc (old c.current) c.current }
    ensures  { not c.new -> array_eq (old c.current) c.current }
    ensures  { not c.new -> max_lex c.current }
  =
    let a = c.current in
    let n = a.length in
    label L in
    let ref r = (n-1) in
    while r >= 0 && a[r] = n-1 do
      invariant { -1 <= r <= n-1 }
      invariant { cte_sub a (r+1) n (n-1) }
      variant   { r + 1 }
      r := r - 1
    done;
    if (r < 0) then (* Last array reached. *)
      c.new <- False
    else begin
      a[r] <- a[r] + 1;
      for i = r+1 to n-1 do
        invariant { r+1 <= i <= n }
        invariant { (a at L)[r]+1 = a[r] }
        invariant { cte_sub a (r+1) i 0 }
        invariant { lt_lex_at (a at L) a r }
        a[i] <- 0
      done;
      c.new <- True
    end

end


(* Examples of enumerative checking with an oracle on an list of integers *)
module EndoSound

  use int.Int
  use array.Array
  use list.List
  use arrayExtension.ToList
  use Endo
  use Enum

  clone lexgen.SmallCheck with
    predicate is_XXX = is_endo,
    val create_cursor = create_cursor,
    val next = next

  (* Bounded-exhaustive testing of the lemma b_is_endo_sound: *)
  let test_b_endo () : verdict
    diverges
  =
    let n = 5 in
    small_check (fun l -> b_endo (to_array l)) n

  let test_b_endo_wrong () : verdict
    diverges
  =
    let n = 4 in
    small_check (fun l -> b_endo_wrong (to_array l)) n

end


(* Example of enumerative check with an oracle on an array of integers.
   In ENUM >= 1.3. *)
module EndoSoundSmallOracleCheck

  use int.Int
  use array.Array
  use Endo
  use Enum

  (* Enumerative testing with b_endo oracle *)
  clone lexgen.SmallOracleCheck with
    predicate is_XXX = is_endo,
    val create_cursor = create_cursor,
    val next = next,
    val oracle = b_endo

  (* Bounded-exhaustive test of the lemma b_is_endo_sound: *)
  let test_b_endo () : verdict
    diverges
  =
    let n = 5 in small_check n

end


(* Example of enumerative check with an oracle on an array of integers.
   In ENUM >= 1.3. *)
module EndoSoundWrongSmallOracleCheck

  use int.Int
  use array.Array
  use Endo
  use Enum

  (* Enumerative testing with b_endo oracle *)
  clone lexgen.SmallOracleCheck with
    predicate is_XXX = is_endo,
    val create_cursor = create_cursor,
    val next = next,
    val oracle = b_endo_wrong

  let test_b_endo_wrong () : verdict
    diverges
  =
    let n = 6 in small_check n

end


module Test

  use int.Int
  use ref.Ref
  use array.Array
  use list.List
  use arrayExtension.ToList
  use Endo
  use Enum
  use lexgen.Cursor

  clone export lexgen.LexXX with
    predicate is_XX = is_endo

  let run ()
    diverges
  =
    let n = 3 in
    let c = create_cursor n in
    let ref l = Nil in
    while c.new do
      invariant { sound c }
      let f = c.current in
      let g = to_list f 0 f.length in
      l := Cons g l;
      next c
    done;
    l

end