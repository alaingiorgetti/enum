(***************************************************************************)
(* Copyright (C) 2019 Clotilde Erard and Alain Giorgetti                   *)
(* FEMTO-ST institute                                                      *)
(***************************************************************************)

(***************************************************************************)
(*  This software is distributed under the terms of the GNU Lesser         *)
(*  General Public License version 2.1                                     *)
(***************************************************************************)

module Surj

  use int.Int
  use array.Array
  use Barray.Barray

  predicate pre_img_sub (a: array int) (u j: int) =
    exists i:int. 0 <= i < u /\ a[i] = j

  predicate pre_img (a: array int) (j: int) = (* pre_img_sub a a.length j *)
    exists i:int. 0 <= i < a.length /\ a[i] = j

  let function b_pre_img (a: array int) (j: int): bool
    ensures { result <-> pre_img a j }
  =
    for i = 0 to a.length-1 do
      invariant { not (pre_img_sub a i j) }
      if a[i] = j then return true
    done;
    false

  predicate init_pre_img (a: array int) (k: int) =
    forall j:int. 0 <= j < k -> pre_img a j

  let function b_init_pre_img (a: array int) (k: int): bool
    ensures { result <-> init_pre_img a k }
  =
    for j = 0 to k-1 do
      invariant { init_pre_img a j }
      if not (b_pre_img a j) then return false
    done;
    true

(* For free in SurjBarray:
  predicate is_surj (a: array int) (k: int) = 
    is_barray a k /\ init_pre_img a k
*)

end


module SurjBarray

  use Barray.Barray
  use Barray.Enum as E
  use Surj

  clone export lexgen.FilterInt with
    predicate is_X = is_barray,
    predicate is_Y = init_pre_img,
    val b_Y = b_init_pre_img,
    val create_cursor_X = E.create_cursor,
    val next_X = E.next

end


module FilterDemo

  use int.Int
  use ref.Ref
  use array.Array
  use list.List
  use arrayExtension.ToList
  use SurjBarray
  use lexgen.Cursor

  let run ()
    diverges
  =
    let n = 3 in
    let k = 2 in
    let c = create_cursor n k in
    let ref l = Nil in
    if c.new then
      while c.new do
        invariant { c.new -> LZ.sound c k }
        let f = c.current in
        let g = to_list f 0 f.length in
        l := Cons g l;
        next c k
      done;
      l

end