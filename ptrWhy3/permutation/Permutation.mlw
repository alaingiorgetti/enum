(********************************************************************)
(* Copyright (C) 2019-2021 Clotilde Erard and Alain Giorgetti       *)
(* FEMTO-ST institute                                               *)
(********************************************************************)

(********************************************************************)
(*  This software is distributed under the terms of the GNU Lesser  *)
(*  General Public License version 2.1                              *)
(********************************************************************)

module Permutation

  use int.Int
  use array.Array
  use array.ArrayPermut
  use arrayExtension.ArrayInjection
  use export arrayExtension.Inc
  use export arrayExtension.Dec
  use mach.int.Int32
  use lex.Lex32

  predicate is_permut_sub (a:array int32) (l u:int) =
    range_sub a l u u /\ inj_sub a l u

  predicate is_permut (a:array int32) = range a /\ injective a

  let function b_permut (a:array int32) (n: int32) : bool
    requires { n = a.length }
    ensures  { result <-> is_permut a }
  =
    b_range a n && b_injective a n

(* Not proved, will be addressed in a subsequent release.

  lemma endoinj_permut: forall a b: array int32.
    0 <= a.length = b.length /\ is_permut a /\ is_permut b
    -> permut a b 0 a.length
  (* consequence of arrayExtension.ArrayInjection.endoinjection_occ *)
*)

  (* These two predicates specify that a[k] is the smallest value bigger than
     a[r] in the array a[r+1..a.length-1]: *)
  predicate im_sup1 (a: array int32) (r k:int) =
    forall i:int. r < i < k -> a[k] < a[i]

  predicate im_sup2 (a: array int32) (r k:int) =
    forall i:int. k < i < a.length -> a[i] < a[r]

(* Not proved, will be addressed in a subsequent release.
  lemma min_lex_sub: forall a: array int32, l u: int.
    0 <= l < u <= a.length /\ injective a /\ is_inc_sub a l u
    -> forall b:array int32. permut a b l u /\ injective b
    -> le_lex_sub a b l u

  lemma max_lex_sub: forall a: array int32, l u: int.
    0 <= l < u <= a.length /\ injective a /\ is_dec_sub a l u
    -> forall b:array int32. permut a b l u /\ injective b
    -> le_lex_sub b a l u
*)
end


module Enum

  use int.Int
  use array.Array
  use int.EuclideanDivision
  use array.ArraySwap
  use array.ArrayExchange
  use array.ArrayPermut
  use array.ArrayEq
  use arrayExtension.Id
  use Permutation 
  use mach.int.Int32
  use mach.c.C
  use lex.Lex32
  use lexgen.Cursor

  clone lexgen.LexXX with
    predicate is_XX = is_permut

  let partial create_cursor (n: int32) : cursor
    requires { n > 0  }
    ensures  { not result.freed }
    ensures  { length result.current.data = n }
    ensures  { result.len = n }
    ensures  { is_id result.current.data }
(*    ensures  { min_lex result.current.data } *)
    ensures  { sound result }
    ensures  { result.new }
  =
    let a = malloc (UInt32.of_int32 n) in
    c_assert (is_not_null a);
    for i = 0 to n-1 do
      invariant { 0 <= i <= n }
      invariant { is_id_sub a.data 0 i }
      set_ofs a i i;
    done;
    assert { is_id a.data };
    { current = a; new = true; len = n; freed = false }

  predicate mirror (a b: array int32) (k: int) (l u: int) = 
    forall i. l <= i < k <= u -> a[i] = b[u+l-1-i] /\ b[i] = a[u+l-1-i]

  let reverse (a: array int32) (l u: int) : unit
    requires { 0 <= l < u <= a.length }
    requires { is_permut_sub a l u }
    requires { is_dec_sub a l u }
    requires { is_permut a }
    requires { in_bounds l }
    requires { in_bounds u }
    ensures  { mirror a (old a) (div (l+u) 2) l u }
    ensures  { mirror a (old a) u l u }
    ensures  { is_permut_sub a l u }
    ensures  { is_inc_sub a l u }
    ensures  { array_eq_sub a (old a) 0 l }
    ensures  { array_eq_sub a (old a) u a.length }
    ensures  { permut_sub (old a) a l u }
    ensures  { permut_sub (old a) a 0 a.length }
    ensures  { is_permut a }
  =
    let m = l + div (u-1-l) 2 in
    for i = l to m do
      invariant { l <= i <= m+1 }
      invariant { mirror a (old a) i l u }
      invariant { array_eq_sub a (old a) i (u+l-i) }
(* The next invariant is not proved. This issue will be addressed in a subsequent release. *)
      invariant { permut (old a) a l u }
      invariant { array_eq_sub (old a) a 0 l }
      invariant { array_eq_sub (old a) a u a.length }
      invariant { permut_sub (old a) a l u }
      swap a i (u+l-1-i);
    done

  let next (c: cursor) : unit
    requires { not c.freed }
    requires { sound c }
    ensures  { sound c }
    ensures  { not c.new -> array_eq (old c.current.data) c.current.data }
(* Not proved, will be addressed in a subsequent release.
    ensures  { c.new -> lt_lex (old c.current.data) c.current.data }
    ensures  { not c.new -> max_lex c.current.data }
    ensures  { c.new -> inc (old c.current.data) c.current.data }
*)
  =
    let a = get_current c in
    let n = c.len in
    label L in
    if n <= 1 then
      c.new <- false
    else
      let ref r = (n-2) in
      while r >= 0 && a[r] > a[r+1] do
        invariant { -1 <= r <= n-2 }
        invariant { is_dec_sub a (r+1) n }
        variant   { r + 1 }
        r <- r - 1
      done;
      if r < 0 then (* last array reached. *)
        c.new <- false
      else
        let ref j = (n-1) in
        while a[r] > a[j] do
          invariant { r + 1 <= j <= n-1 }
          invariant { im_sup2 a r j }
          variant   { j }
          j <- j - 1
        done;
        swap a (to_int r) (to_int j);
        assert { 0 <= r <= n-2 };
        assert { n = a.length };
        reverse a (to_int (r+1)) (to_int n);
        assert { lt_lex_at (a at L) a r };
        c.new <- true

end