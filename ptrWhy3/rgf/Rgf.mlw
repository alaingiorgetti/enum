(***************************************************************************)
(* Copyright (C) 2019-2021 Clotilde Erard and Alain Giorgetti              *)
(* FEMTO-ST institute                                                      *)
(***************************************************************************)

(***************************************************************************)
(*  This software is distributed under the terms of the GNU Lesser         *)
(*  General Public License version 2.1                                     *)
(***************************************************************************)

module Rgf

  use int.Int
  use array.Array
  use mach.int.Int32
  use lexgen.Cursor

  predicate is_rgf_sub (a:array int32) (l u: int) = a[0] = 0 /\
    forall i:int. l <= i < u -> 0 <= a[i] <= a[i-1]+1

  predicate is_rgf (a:array int32) = a.length = 0 \/ is_rgf_sub a 1 a.length

  let function b_rgf (a: array int32) (n: int32) : bool
    requires { n = a.length }
    requires { forall i:int. 0 <= i < n -> in_bounds (a[i] + 1) }
    ensures  { result <-> is_rgf a }
  =
    if n = 0 then
      return true
    else
      if a[0] <> 0 then
        return false
      else
        for i = 1 to n-1 do
          invariant { is_rgf_sub a 1 i }
          if not (0 <= a[i] <= a[i-1]+1) then return false
        done;
        true

end


module Enum

  use int.Int
  use ref.Ref
  use array.Array
  use array.ArrayEq
  use arrayExtension.Inc
  use arrayExtension.Cte
  use mach.int.Int32
  use mach.c.C
  use Rgf
  use lex.Lex32
  use lexgen.Cursor

  clone lexgen.LexXX with
    predicate is_XX = is_rgf

  (** Lemma for the proof of the postcondition
        `ensures  { c.new -> inc (old c.current.data) c.current.data }`
      of `next`. *)
  lemma rgf_inc: forall a b: array int32, r: int32.
    1 <= r < a.length ->
    is_rgf a ->
    is_inc_sub a r a.length ->
    is_rgf b ->
    (forall i:int. 0 <= i < a.length -> in_bounds (a[i] + 1)) ->
    a.length = b.length ->
    cte_sub b (r+1) a.length 0 ->
    b[r] = a[r]+1 ->
    array_eq_sub a b 0 r ->
    inc a b

  let partial create_cursor (n: int32) : cursor
    requires { n > 0 }
    ensures  { not result.freed }
    ensures  { length result.current.data = n }
    ensures  { result.len = n }
    ensures  { cte result.current.data 0 }
    ensures  { sound result }
    ensures  { min_lex result.current.data }
  =
    let a = malloc (UInt32.of_int32 n) in
    c_assert (is_not_null a);
    for i = 0 to n-1 do
      invariant { cte_sub a.data 0 i 0 }
      set_ofs a i 0;
    done;
    { current = a; new = true; len = n; freed = false }

  let next (c: cursor) : unit
    requires { not c.freed }
    requires { sound c }
    requires { forall i:int. 0 <= i < c.len -> in_bounds (c.current.data[i] + 1) }
    ensures  { sound c }
    ensures  { length c.current.data = length (old c.current.data) }
    ensures  { c.new -> lt_lex (old c.current.data) c.current.data }
    ensures  { not c.new -> array_eq (old c.current.data) c.current.data }
    ensures  { not c.new -> is_inc_sub (old c.current.data) 0 c.len }
    ensures  { not c.new -> max_lex c.current.data }
    ensures  { c.new -> inc (old c.current.data) c.current.data }
  =
    let a = get_current c in
    let n = c.len in
    if n <= 1 then
      c.new <- false
    else begin
      let ref r = (n-1) in
      while r >= 1 && a[r] = a[r-1]+1 do
        invariant { 0 <= r <= n-1 }
        invariant { is_inc_sub a r n }
        invariant { array_eq (old c.current.data) c.current.data }
        variant   { r + 1 }
        r <- r-1
      done;
      if r = 0 then (* Last array reached. *)
        c.new <- false
      else begin
        a[r] <- a[r] + 1;
        for i = r+1 to n-1 do
          invariant { r+1 <= i <= n }
          invariant { lt_lex_sub_at (old c.current.data) c.current.data 0 n r }
          invariant { cte_sub c.current.data (r+1) i 0 }
          invariant { c.current.data[r] = (old c.current.data)[r]+1 }
          invariant { array_eq_sub (old c.current.data) c.current.data 0 r }
          a[i] <- 0
        done;
        c.new <- true;
        assert { sound c }; 
        assert { is_rgf c.current.data };
        assert { inc (old c.current.data) c.current.data }
      end
    end

end