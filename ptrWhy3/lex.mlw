(********************************************************************)
(* Copyright (C) 2019 Alain Giorgetti and Clotilde Erard            *)
(* FEMTO-ST institute                                               *)
(********************************************************************)

(********************************************************************)
(*  This software is distributed under the terms of the GNU Lesser  *)
(*  General Public License version 2.1                              *)
(********************************************************************)

module Lex32

  use int.Int
  use array.Array
  use array.ArrayEq
  use mach.int.Int32

  (** * Equality of initial sub-arrays a1[0..u-1] and a2[0..u-1] *)

  predicate eq_prefix (a1 a2: array int32) (u: int) = array_eq_sub a1 a2 0 u

  (** * Lexicographic order on arrays of integers *)

  (** ** Strict order *)
  predicate lt_lex_sub_at (a1 a2:array int32) (l u:int) (i:int) = 
    l <= i < u /\ array_eq_sub a1 a2 l i /\ a1[i] < a2[i]

  predicate lt_lex_at (a1 a2: array int32) (i:int) = 
    a1.length = a2.length /\ lt_lex_sub_at a1 a2 0 a1.length i  

  predicate lt_lex_sub (a1 a2: array int32) (l u: int) = exists i:int. 
    l <= i < u /\ array_eq_sub a1 a2 l i /\ a1[i] < a2[i]

  predicate lt_lex (a1 a2: array int32) = a1.length = a2.length
    /\ lt_lex_sub a1 a2 0 a1.length

  predicate le_lex_sub (a1 a2: array int32) (l u: int) = 
    lt_lex_sub a1 a2 l u \/ array_eq_sub a1 a2 l u

  predicate le_lex (a1 a2: array int32) = a1.length = a2.length
    /\ le_lex_sub a1 a2 0 a1.length

  (*For the generator of permutations: *)
  lemma prefix_le_lex_sub: forall a b:array int32, l u:int.
    eq_prefix a b l /\ le_lex_sub a b l u -> le_lex_sub a b 0 u

  let rec lemma not_array_eq_sub (a b: array int32) (l u: int) : unit
    requires { 0 <= l < u <= a.length = b.length }
    requires { not (array_eq_sub a b l u) }
    variant  { u - l }
    ensures  { exists i:int. l <= i < u /\ array_eq_sub a b l i /\ a[i] <> b[i] }
  =
    if a[l] = b[l] then not_array_eq_sub a b (l+1) u

  lemma total_order: forall a b: array int32, l u: int.
    0 <= l < u <= a.length = b.length /\ not (lt_lex_sub b a l u)
    -> le_lex_sub a b l u

end