(***************************************************************************)
(* Copyright (C) 2018-19 Alain Giorgetti, RÃ©mi Lazarini and Clotilde Erard *)
(* FEMTO-ST institute                                                      *)
(***************************************************************************)

(***************************************************************************)
(*  This software is distributed under the terms of the GNU Lesser         *)
(*  General Public License version 2.1                                     *)
(***************************************************************************)

module Fact

  use int.Int
  use array.Array

  predicate is_fact_sub (a:array int) (l u:int) =
    forall i:int. l <= i < u -> 0 <= a[i] <= i

  predicate is_fact (a:array int) = is_fact_sub a 0 a.length

  let function b_fact (a: array int) : bool
    ensures { result <-> is_fact a }
  =
    let n = a.length in
    for i = 0 to n - 1 do
      invariant { is_fact_sub a 0 i }
      if not (0 <= a[i] <= i) then return false
    done;
    true

end


module Enum

  use int.Int
  use ref.Ref
  use array.Array
   use array.ArrayEq
  use arrayExtension.Cte
  use arrayExtension.Id
  use Fact
  use lexgen.Cursor
  use list.List

  clone export lexgen.LexXX with
    predicate is_XX = is_fact

  let create_cursor (n: int) : cursor
    requires { n >= 0 }
    ensures  { length result.current = n }
    ensures  { sound result }
    ensures  { min_lex result.current }
  = 
    let a = make n 0 in
    { current = a; new = true }

  let next (c: cursor) : unit
    requires { sound c }
    ensures  { sound c }
    ensures  { c.current.length = (old c).current.length }
    ensures  { c.new -> lt_lex (old c.current) c.current }
    ensures  { c.new -> inc (old c.current) c.current }
    ensures  { not c.new -> array_eq (old c.current) c.current }
    ensures  { not c.new -> max_lex c.current }
  =
    let a = c.current in
    let n = a.length in
    label L in
    let ref r = n-1 in
    while r >= 0 && a[r] = r do
      invariant { -1 <= r <= n-1 }
      invariant { is_id_sub a (r+1) n }
      variant   { r + 1 }
      r := r - 1
    done; 
    if (r < 0) then (* Last array reached. *)
      c.new <- false
    else begin
      a[r] <- a[r] + 1;
      for i = r+1 to n-1 do
        invariant { r+1 <= i <= n }
        invariant { (a at L)[r]+1 = a[r] }
        invariant { cte_sub a (r+1) i 0 }
        invariant { lt_lex_at (a at L) a r }
        a[i] <- 0
      done;
      c.new <- true
    end
    
end


module FactSound

  use int.Int
  use array.Array
  use list.List
  use array.ToList
  use Fact
  use Enum 

  clone lexgen.SmallCheck with
    predicate is_XXX = is_fact,
    val create_cursor = create_cursor,
    val next = next

  lemma b_is_fact_sound: forall a: array int. is_fact a -> b_fact a = true

  (* Bounded-exhaustive test of the lemma before proving it: *)
  let test_b_fact () : verdict
    diverges
  =
    let n = 5 in
    small_check (fun l -> b_fact (to_array l)) n

end


module Code
  use arrayExtension.ArrayInjection (* for range*, injective and inj_sub *)
  use int.Int
  use ref.Ref
  use array.Array
  use list.List
  use list.Length as L
  use list.Append
  use list.NthNoOpt
  use Fact
  use Permutation.Permutation
  use listExtension.ListExtension as LE (* for id and rm_nth *)
  use option.Option
  use array.ArrayEq (* for equality array_eq_sub of sub-arrays *)

  predicate injlist (l:list int) = forall i j: int.
    0 <= i < j < L.length l -> nth i l <> nth j l

  (* (not_in_subarray x a l u) holds iff x in not in a[l..u-1]. *)
  predicate not_in_subarray (x:int) (a:array int) (l u:int) = forall i : int.
    l <= i < u -> a[i] <> x

  (* (disj_sub a x y l) holds iff a[x..y-1] and l are disjoint *)
  predicate disj_sub (a: array int) (x y: int) (l:list int) = forall i : int.
    0 <= i < L.length l -> not_in_subarray (nth i l) a x y

  (* Transformation of factorials into permutations.
     Proved with Alt-Ergo 1.30 only, without splitting. *) 
  let function code (f: array int) : array int
    requires { is_fact f }
    ensures { is_permut result }
  = 
    let n = f.length in
    let p = make n 0 in
    let l = ref (LE.id n) in
    (* Timeout if this assertion is removed: proved in 5.33s. Can be
       removed by increasing timeout: *)
    assert { injlist !l };
    while not (is_nil !l) do
      invariant { -1 <= L.length !l - 1 < n }
      invariant { LE.is_blist !l n }
      invariant { injlist !l }
      invariant { range_sub p (L.length !l) n n }
      invariant { inj_sub p (L.length !l) n }
      invariant { disj_sub p (L.length !l) n !l } (* No number in !l is in p[i+1..n-1] *)
      variant { L.length !l }
      let i = L.length !l - 1 in (* The following code assigns p[i] *) 
      label L in
      let j = f[i] in
      let k = LE.rm_nth j l in
(* Part of prover reasoning described by optional assertions:
      assert { k = nth j (at !l 'L) };        (* k comes from !l *)
      assert { disj_sub p (i+1) n !l };       (* and !l and p[i+1..n-1] are disjoint, *)
      assert { not_in_subarray k p (i+1) n }; (* so k is not in p[i+1..n-1]. *)
*)
      p[i] <- k;                               (* k is added to p, ... *)
(* cont'd
      assert { range_sub p i n n };
      assert { inj_sub p (i+1) n };           (* ... thus injectivity of p is preserved *)
*)
    done;
    p

end


module FactEndo

  use Endo.Endo
  use Endo.Enum as E
  use Fact

  clone export lexgen.Filter with
    predicate is_X = is_endo,
    predicate is_Y = is_fact,
    val b_Y = b_fact,
    val create_cursor_X = E.create_cursor,
    val next_X = E.next

end


module FilterDemo

  use int.Int
  use ref.Ref
  use array.Array
  use list.List
  use arrayExtension.ToList
  use FactEndo
  use lexgen.Cursor

  let run ()
    diverges
  =
    let n = 3 in
    let c = create_cursor n in
    let ref l = Nil in
    if c.new then
      while c.new do
        invariant { c.new -> LZ.sound c }
        let f = c.current in
        let g = to_list f 0 f.length in
        l := Cons g l;
        next c
      done;
    l

end


module Test

  use int.Int
  use ref.Ref
  use array.Array
  use list.List
  use arrayExtension.ToList
  use Fact
  use Enum
  use lexgen.Cursor

  clone export lexgen.LexXX with
    predicate is_XX = is_fact

  let run ()
    diverges
  =
    let n = 3 in
    let c = create_cursor n in
    let ref l = Nil in
    while c.new do
      invariant { sound c }
      let f = c.current in
      let g = to_list f 0 f.length in
      l := Cons g l;
      next c
    done;
    l

end