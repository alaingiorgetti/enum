(********************************************************************)
(* Copyright (C) 2019 Alain Giorgetti and Clotilde Erard            *)
(* FEMTO-ST institute                                               *)
(********************************************************************)

(********************************************************************)
(*  This software is distributed under the terms of the GNU Lesser  *)
(*  General Public License version 2.1                              *)
(********************************************************************)

module Permutation

  use int.Int
  use array.Array
  use array.ArrayPermut
  use arrayExtension.ArrayInjection
  use export arrayExtension.Inc
  use export arrayExtension.Dec
  use lex.Lex

  predicate is_permut (a:array int) = range a /\ injective a

  let function b_permut (a:array int) : bool
    ensures { result <-> is_permut a }
  = 
    b_range a && b_inj a

  lemma endoinj_permut: forall a b: array int.
    0 <= a.length = b.length /\ is_permut a /\ is_permut b
    -> permut a b 0 a.length

  (* These two predicates specify that a[k] is the smallest value bigger than a[r] in
     the array a[r+1..a.length-1]: *)
  predicate im_sup1 (a: array int) (r k:int) = forall i:int. r < i < k -> a[k] < a[i]
  predicate im_sup2 (a: array int) (r k:int) = forall i:int. k < i < a.length -> a[i] < a[r]

  lemma min_lex_sub: forall a: array int, l u: int.
    0 <= l < u <= a.length /\ injective a /\ is_inc_sub a l u
    -> forall b:array int. permut a b l u /\ injective b
    -> le_lex_sub a b l u

  lemma max_lex_sub: forall a: array int, l u: int.
    0 <= l < u <= a.length /\ injective a /\ is_dec_sub a l u
    -> forall b:array int. permut a b l u /\ injective b
    -> le_lex_sub b a l u

end


module Enum

  use int.Int
  use ref.Ref
  use array.Array
  use array.ArraySwap
  use array.ArrayExchange
  use array.ArrayPermut
  use array.ArrayEq
  use mapExtension.MapExtension
  use arrayExtension.Id
  use Permutation
  use lexgen.Cursor

  clone lexgen.LexXX with
    predicate is_XX = is_permut

  let create_cursor (n: int) : cursor
    requires { n >= 0 }
    ensures  { result.new && sound result }
    ensures  { min_lex result.current }
    ensures  { result.current.length = n }
  = 
    let a = make n 0 in
    for i = 0 to n-1 do
      invariant { 0 <= i <= n }
      invariant { is_id_sub a 0 i }
      a[i] <- i
    done;
    assert { is_id a };
    { current = a; new = true }

  (* This lemma splits the predicate is_inc_sub to prove the last 
     postcondition of reverse. *)
  lemma split_inc_sub: forall a: array int, l m u:int.
     0 <= l <= m < u <= a.length
     /\ is_inc_sub a l (m+1) /\ is_inc_sub a m u -> is_inc_sub a l u

  (* reverse function for next *)
  let reverse (a: array int) (l u: int) : unit
    requires { 0 <= l < u <= a.length }
    requires { is_permut a }
    requires { is_dec_sub a l u }
    ensures  { is_permut a }
    ensures  { permut_sub (old a) a l u }
    ensures  { is_inc_sub a l u }
  =
    let ref x = l in
    let ref y = (u-1) in
    label L in
    while x < y do
      invariant { l <= x < u }
      invariant { l <= y < u }
      invariant { is_permut a }
      invariant { permut_sub (a at L) a l u }
      invariant { is_inc_sub a l (x+1) }
      invariant { is_inc_sub a y u }
      invariant { array_eq_sub (a at L) a x (y+1) }
      variant   { y }
      swap a x y;
      assert { is_permut a }; (* speed up proof *)
      y := y - 1;
      x := x + 1
    done

  (* The following lemmas are proved with SMT solvers and used as axioms in Coq: *)

  (* split permut *)
  lemma is_permut_split: forall a b: array int, l: int.
    0 <= l < a.length = b.length /\ is_permut a /\ is_permut b
    /\ permut a b 0 a.length /\ permut a b 0 l -> permut a b l a.length

  lemma is_permut_split_imply_permut_sub: forall a b: array int, l: int.
    0 <= l < a.length = b.length /\ is_permut a /\ is_permut b
    /\ permut a b 0 a.length /\ array_eq_sub a b 0 l -> permut_sub a b l a.length

  (* array_eq_sub implies permut in the same interval *)
  lemma array_eq_imply_permut: forall a b:array int, l u:int.
    0 <= l < u <= a.length = b.length
    /\ array_eq_sub a b l u -> permut a b l u

  (* permut and permut_sub are symmetric *)
  lemma permut_sym: forall a b:array int, l u: int.
    permut a b l u <-> permut b a l u

  lemma permut_sub_sym: forall a b:array int, l u: int.
    permut_sub a b l u <-> permut_sub b a l u

  lemma array_eq_sub_sym: forall a b: array int, l u: int.
    array_eq_sub a b l u <->  array_eq_sub b a l u

  (* permut is transitive *)
  lemma permut_trans: forall a1 a2 a3 : array int. forall l u : int.
    permut a1 a2 l u -> permut a2 a3 l u -> permut a1 a3 l u

  lemma permut_sub_trans: forall a1 a2 a3 : array int. forall l u : int.
    permut_sub a1 a2 l u -> permut_sub a2 a3 l u -> permut_sub a1 a3 l u

  (* array_eq_sub is transitive *)
  lemma array_eq_sub_trans: forall a1 a2 a3 : array int. forall l u : int.
    array_eq_sub a1 a2 l u -> array_eq_sub a2 a3 l u -> array_eq_sub a1 a3 l u

  (* Condition to find value b[l] on large or strict suffix if 
     (permut_sub a b l u) holds: *)
  lemma value_on_large_suffix: forall a b: array int, l u: int.
    0 <= l < u <= a.length = b.length /\ permut_sub a b l u
    -> exists i:int. l <= i < u /\ b[l] = a[i]

  lemma value_on_strict_suffix: forall a b: array int, l u: int.
    0 <= l < u <= a.length = b.length /\ permut_sub a b l u /\ lt_lex_sub_at a b l u l
    -> exists i:int. l < i < u /\ b[l] = a[i]

  lemma inc_permut: forall a b: array int, r j:int.
    0 <= r < j < a.length = b.length /\ is_permut a /\ is_dec_sub a (r+1) a.length /\
    is_permut b /\ is_inc_sub b (r+1) a.length /\
    lt_lex_at a b r /\ permut_sub a b r a.length /\
    im_sup1 a r j /\ im_sup2 a r j /\ b[r] = a[j]
    -> inc a b

  let next (c: cursor) : unit
    requires { sound c }
    ensures  { sound c }
    ensures  { not c.new -> array_eq (old c.current) c.current }
    ensures  { not c.new -> max_lex c.current }
    ensures  { c.new -> lt_lex (old c.current) c.current }
    ensures  { c.new -> inc (old c.current) c.current }
  =
    let a = c.current in
    let n = a.length in
    label L in
    if n <= 1 then
      c.new <- false
    else
      let ref r = (n-2) in (* 1. find the rightmost index r s.t. a[r] < a[r+1]: *)
      while r >= 0 && a[r] > a[r+1] do
        invariant { -1 <= r <= n-2 }
        invariant { is_dec_sub a (r+1) n }
        variant   { r + 1 }
        r := r - 1
      done;
      if r < 0 then (* last array reached. *)
        c.new <- false
      else (* 2. Find rightmost (i.e. smallest) element a[j] greater than a[r]: *)
        let ref j = (n-1) in
        while a[r] > a[j] do
          invariant { r + 1 <= j <= n-1 }
          invariant { im_sup2 a r j }
          variant   { j }
          j := j - 1
        done;
        swap a r j; (* 3. swap *)
        reverse a (r+1) n; (* 4. reverse suffix *)
        assert { lt_lex_at (a at L) a r };
        c.new <- true

end


module PermutationSound

  use int.Int
  use array.Array
  use array.ArraySwap
  use ref.Ref
  use list.List
  use array.ToList
  use arrayExtension.ArrayInjection
  use Permutation 
  use Enum

  clone lexgen.SmallCheck with
    predicate is_XXX = is_permut,
    val create_cursor = create_cursor,
    val next = next

  lemma b_is_permut_sound: forall a: array int. is_permut a -> b_permut a = true

  (* Bounded-exhaustive test of the lemma before proving it: *)
  let test_b_permut () : verdict
    diverges
  =
    let n = 5 in
    small_check (fun l -> b_permut (to_array l)) n

  (* Presented in [EG19]: (reverse a) reverses the array a. *)
  let reverse (a: array int) : unit
    requires { is_permut a }
    ensures  { is_permut a }
  =
    let n = a.length in
    if 0 < n then
    let ref x = 0 in
    let ref y = n-1 in
    label L in
    while x < y do
      invariant { 0 <= x < n }
      invariant { 0 <= y < n }
      invariant { is_permut a }
      variant   { y }
      swap a x y;
      y := y-1;
      x := x+1
    done

  let test () : verdict
    diverges
  =
    let n = 6 in
    small_check (fun l -> let a = to_array l in reverse a; b_permut a) n
  
  (* The following predicate contains an intentional error. 
     It is used to get a counterexample. *)
  let function b_range_wrong (a: array int) : bool
    ensures { result <-> range a }
  =
    let n = a.length in
    for j = 0 to n - 1 do
      invariant { range_sub a 0 j n }
      if not (in_interval a[j] 0 (n-1)) then return false
    done;
    true

  let test1 () : verdict
    diverges
  =
    let n = 6 in
    small_check (fun l -> b_range_wrong (to_array l)) n

end


module Test

  use int.Int
  use ref.Ref
  use array.Array
  use list.List
  use array.ToList
  use Permutation
  use Enum
  use lexgen.Cursor

  clone lexgen.LexXX with
    predicate is_XX = is_permut

  let run ()
    diverges
  =
    let n = 3 in
    let c = create_cursor n in
    let ref l = Nil in
    while c.new do
      invariant { sound c }
      let f = c.current in
      let g = to_list f 0 f.length in
      l := Cons g l;
      next c
    done;
    l

end